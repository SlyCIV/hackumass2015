package com.umass.hackathon;

import java.util.*;

public class ClauseCreator {

	public static IClauseComponent buildIClauseComponent( String[] s ) {
		
		String operator = null;
		
		for (int i = 0; i < s.length; i++) {
			
			switch (s[i]) {
				case "greater":
					operator = ">";
					for (int j = i + 1; j < s.length - 1; j++) {
						if (s[j].equals("or") || s[j+1].equals("equal")) {
							operator += "=";
							break;
						}
					}
					break;
				case "less":
					operator = "<";
					for (int j = i + 1; j < s.length - 1; j++) {
						if (s[j].equals("or") && s[j+1].equals("equal")) {
							operator += "=";
							break;
						}
					}
					break;
				case "equals":
					operator = "==";
					break;
				case "plus":
					operator = "+";
					break;
				case "minus":
					operator = "-";
					break;
				case "times":
					operator = "*";
					break;
				case "divided":
					operator = "/";
					break;
				case "not":
				case "invert":
				case "increment":
				case "decrement":
					
			}
			
			switch (s[i]) {
				case "greater":
				case "less":
				case "equals":
				case "plus":
				case "minus":
				case "times":
				case "divided":				
					IClauseComponent left = buildIClauseComponent( Arrays.copyOfRange(s, 0, i));
					IClauseComponent right = buildIClauseComponent( Arrays.copyOfRange(s, i+1, s.length));
					return new BinaryOp(operator, new IClauseComponent[]{left, right});
				case "not":
				case "invert":
				case "increment":
				case "decrement":
					IClauseComponent operand = buildIClauseComponent( Arrays.copyOfRange(s, i+1, s.length));
					return new UnaryOp(operator, operand);
			}
		}
		return null;
	}
	
	private ArrayList<Integer> findKeywordsIndex(String[] s) {
		
		ArrayList<Integer> indexes = new ArrayList<Integer>();
		
		for (int i = 0; i < s.length; i++) {
			
		}
		
		return indexes;
	}
	
}
